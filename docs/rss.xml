<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Leo老师在这里</title><link>https://mcoblackmore.github.io/liuchanghui.github.io</link><description>给我一个逻辑起点，我能证明你并非人类</description><copyright>Leo老师在这里</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/49425642?v=4</url><title>avatar</title><link>https://mcoblackmore.github.io/liuchanghui.github.io</link></image><lastBuildDate>Tue, 25 Jun 2024 02:20:21 +0000</lastBuildDate><managingEditor>Leo老师在这里</managingEditor><ttl>60</ttl><webMaster>Leo老师在这里</webMaster><item><title>【Python】(分形几何结构)_递归调用的妙用</title><link>https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90Python%E3%80%91%28-fen-xing-ji-he-jie-gou-%29_-di-gui-diao-yong-de-miao-yong.html</link><description>## 体验奇妙的递归调用的妙用：&#13;
&#13;
### 1.带颜色的分形树&#13;
&#13;
&lt;img width='324' alt='22222' src='https://github.com/mcoblackmore/liuchanghui.github.io/assets/49425642/46283137-4a94-45f5-a429-8013c1cb2ca8'&gt;&#13;
&#13;
### 2.谢尔宾斯基三角形&#13;
&#13;
```Python&#13;
import turtle&#13;
screen = turtle.Screen()&#13;
screen.tracer(0)&#13;
def draw_sierpinski(length,depth):&#13;
    if depth==0:&#13;
        for i in range(3):&#13;
            turtle.forward(length)&#13;
            turtle.left(120)&#13;
    else:&#13;
        draw_sierpinski(length/2,depth-1)# 递归调用自己&#13;
        turtle.forward(length/2)&#13;
        draw_sierpinski(length/2,depth-1)&#13;
        turtle.backward(length/2)&#13;
        turtle.left(60)&#13;
        turtle.forward(length/2)&#13;
        turtle.right(60)&#13;
        draw_sierpinski(length/2,depth-1)&#13;
        turtle.left(60)&#13;
        turtle.backward(length/2)&#13;
        turtle.right(60)&#13;
window = turtle.Screen()&#13;
window.bgcolor('white') &#13;
turtle.speed(0)&#13;
turtle.up()&#13;
turtle.goto(-400,-300)&#13;
turtle.down()&#13;
# 使用不同的深度depth（这里是10）尝试产生不同的谢式三角形！&#13;
draw_sierpinski(800,8)  &#13;
screen.update()&#13;
```&#13;
&#13;
### 3.科赫雪花&#13;
&#13;
```Python&#13;
import turtle&#13;
wn = turtle.Screen()&#13;
wn.tracer(0)&#13;
turtle.width(4)&#13;
turtle.speed(1000)&#13;
def koch(t,order,size):&#13;
    if order == 0:&#13;
        t.forward(size)&#13;
    else:&#13;
        koch(t,order-1,size/3)&#13;
        t.left(60)&#13;
        koch(t,order-1,size/3)&#13;
        t.right(120)&#13;
        koch(t,order-1,size/3)&#13;
        t.left(60)&#13;
        koch(t,order-1,size/3)&#13;
for _ in range(3):&#13;
    koch(turtle,5,400)&#13;
    turtle.right(120)&#13;
```&#13;
&#13;
### 4.另一种五角星雪花&#13;
```Python&#13;
#'Recursive Star'&#13;
import turtle&#13;
wn = turtle.Screen()&#13;
wn.tracer(0,0)&#13;
def star(turtle, n,r):&#13;
    ''' draw a star of n rays of length r'''&#13;
    &#13;
    for k in range(0,n):&#13;
        turtle.forward(r)&#13;
        turtle.backward(r)&#13;
        turtle.left(360/n)&#13;
    '''&#13;
    for k in range(5):&#13;
        turtle.fd(r)&#13;
    '''&#13;
def recursive_star(turtle, n, r, depth):&#13;
    if depth == 0:&#13;
        star(turtle, n, 1.6)&#13;
    else:&#13;
        for k in range(0,n):&#13;
            turtle.forward(r)&#13;
            recursive_star(turtle, n, 0.4*r, depth - 1)&#13;
            turtle.backward(r)&#13;
            turtle.left(360/n)&#13;
&#13;
fred = turtle.Turtle()&#13;
fred.speed(1000)&#13;
fred.width(2)&#13;
fred.color('red')&#13;
#star(fred,5,100)&#13;
recursive_star(fred,5,150,4)&#13;
```。</description><guid isPermaLink="true">https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90Python%E3%80%91%28-fen-xing-ji-he-jie-gou-%29_-di-gui-diao-yong-de-miao-yong.html</guid><pubDate>Tue, 25 Jun 2024 02:18:14 +0000</pubDate></item><item><title>【Python】(Python中级) 数据库管理系统_初级</title><link>https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90Python%E3%80%91%28Python-zhong-ji-%29%20-shu-ju-ku-guan-li-xi-tong-_-chu-ji.html</link><description># 项目要点&#13;
&#13;
Python tkinter界面 + sqlite3数据库&#13;
&#13;
# 项目文件&#13;
&#13;
- lab.py: 主程序&#13;
- database.py: sqlite3数据库基本操作，包含建表、查表、插入、删除、更新、查询id存在性&#13;
- Employees.db:默认操作的sqlite3数据库&#13;
&#13;
# 项目界面&#13;
&#13;
&lt;img width='677' alt='sf' src='https://github.com/mcoblackmore/liuchanghui.github.io/assets/49425642/2b2d38fd-67ce-4563-a7cf-7a0f72a8f51d'&gt;&#13;
&#13;
# 项目文件&#13;
[lab.py.pdf](https://github.com/user-attachments/files/15956051/lab.py.pdf)&#13;
[database.py.pdf](https://github.com/user-attachments/files/15956057/database.py.pdf)&#13;
&#13;
# 项目代码&#13;
&#13;
## database.py&#13;
&#13;
```Python&#13;
import sqlite3&#13;
def create_table():&#13;
    conn = sqlite3.connect('Employees.db')&#13;
    cursor = conn.cursor()&#13;
    cursor.execute('''CREATE TABLE IF NOT EXISTS Employees(&#13;
                   id TEXT PRIMARY KEY,&#13;
                   name TEXT,&#13;
                   role TEXT,&#13;
                   gender TEXT,&#13;
                   status TEXT)''')&#13;
    conn.commit()&#13;
    conn.close()&#13;
&#13;
def fetch_employees():&#13;
    conn = sqlite3.connect('Employees.db')&#13;
    cursor = conn.cursor()&#13;
    cursor.execute('SELECT * FROM Employees')&#13;
    employees = cursor.fetchall()&#13;
    conn.close()&#13;
    return employees&#13;
def insert_employee(id, name, role, gender, status):&#13;
    conn = sqlite3.connect('Employees.db')&#13;
    cursor = conn.cursor()&#13;
    cursor.execute('INSERT INTO Employees(id, name, role, gender, status) VALUES(?,?,?,?,?)', &#13;
                   (id, name, role, gender, status))&#13;
    conn.commit()&#13;
    conn.close()&#13;
&#13;
def delete_employee(id):&#13;
    conn = sqlite3.connect('Employees.db')&#13;
    cursor = conn.cursor()&#13;
    cursor.execute('DELETE FROM Employees WHERE id=?', (id,))&#13;
    conn.commit()&#13;
    conn.close()&#13;
def update_employee(new_name, new_role, new_gender, new_status, id):&#13;
    conn = sqlite3.connect('Employees.db')&#13;
    cursor = conn.cursor()&#13;
    cursor.execute('UPDATE Employees SET name=?, role=?, gender=?, status=? WHERE id=?', &#13;
                   (new_name, new_role, new_gender, new_status, id))&#13;
    conn.commit()&#13;
    conn.close()&#13;
def id_exists(id):&#13;
    conn = sqlite3.connect('Employees.db')&#13;
    cursor = conn.cursor()&#13;
    cursor.execute('SELECT count(*) FROM Employees WHERE id=?', (id,))&#13;
    result = cursor.fetchone()&#13;
    conn.close()&#13;
    return result[0] &gt; 0&#13;
&#13;
create_table()&#13;
&#13;
```&#13;
&#13;
## lab.py&#13;
&#13;
```Python&#13;
import customtkinter # 导入customtkinter库,这个好看的库&#13;
from tkinter import *&#13;
from tkinter import messagebox&#13;
from tkinter import ttk&#13;
import tkinter as tk&#13;
import database&#13;
from PIL import ImageTk,Image&#13;
&#13;
app = customtkinter.CTk()  # 这个是创建了一个CTk对象，用来创建窗口&#13;
app.title('Employee Management System')&#13;
app.geometry('900x420')&#13;
app.config(bg='#161c25')&#13;
app.resizable(False, False)&#13;
&#13;
font1 = ('Arial',20,'bold')&#13;
font2 = ('Arial',12,'bold')&#13;
# 添加到树视图&#13;
def add_to_treeview():&#13;
    emplyees = database.fetch_employees()&#13;
    tree.delete(*tree.get_children())&#13;
    for employee in emplyees:&#13;
        tree.insert('', END, values=employee)&#13;
# 清空树视图输入框&#13;
def clear(*clicked):&#13;
    if clicked:&#13;
        tree.selection_remove(tree.focus())&#13;
        tree.focus('') # 取消选中状态&#13;
    id_entry1.delete(0, END)&#13;
    name_entry.delete(0, END)&#13;
    role_entry.delete(0, END)&#13;
    variable1.set('男')&#13;
    status_entry.delete(0, END)&#13;
&#13;
def display_data(event):#等待树视图双击事件&#13;
    selected_item = tree.focus()&#13;
    if selected_item:&#13;
        row = tree.item(selected_item)['values']&#13;
        clear() # 清空输入框所有内容&#13;
        id_entry1.insert(0, row[0])&#13;
        name_entry.insert(0, row[1])&#13;
        role_entry.insert(0, row[2])&#13;
        variable1.set(row[3])&#13;
        status_entry.insert(0, row[4])&#13;
    else:&#13;
        pass&#13;
def delete():&#13;
    selected_item = tree.focus()&#13;
    if not selected_item:&#13;
        messagebox.showerror('Error', '请选择要删除的员工')&#13;
    else:&#13;
        id = id_entry1.get()&#13;
        database.delete_employee(id) # 删除数据库中的数据&#13;
        add_to_treeview() # 更新树视图&#13;
        clear() # 清空输入框所有内容&#13;
        messagebox.showinfo('Success', '删除成功')&#13;
&#13;
def update():&#13;
    selected_item = tree.focus()&#13;
    if not selected_item:&#13;
        messagebox.showerror('Error', '请选择要更新的员工')&#13;
    else:&#13;
        id = id_entry1.get()&#13;
        name = name_entry.get()&#13;
        role = role_entry.get()&#13;
        gender = variable1.get()&#13;
        status = status_entry.get()&#13;
        database.update_employee(name, role, gender, status,id) # 更新数据库中的数据&#13;
        add_to_treeview() # 更新树视图&#13;
        clear() # 清空输入框所有内容&#13;
        messagebox.showinfo('牛逼', '更新成功')&#13;
&#13;
&#13;
# 插入数据&#13;
def insert():&#13;
    id = id_entry1.get()&#13;
    name = name_entry.get()&#13;
    role = role_entry.get()&#13;
    gender = variable1.get()&#13;
    status = status_entry.get()&#13;
    if not(id and name and role and gender and status):&#13;
        messagebox.showerror('Error', '请填充所有的值')&#13;
    elif database.id_exists(id):&#13;
        messagebox.showerror('Error', 'ID已存在')&#13;
    else:&#13;
        database.insert_employee(id, name, role, gender, status)&#13;
        add_to_treeview()&#13;
        clear()&#13;
        messagebox.showinfo('Success', '添加成功')&#13;
        #clear_input()&#13;
        &#13;
################################################&#13;
&#13;
&#13;
top = PhotoImage(file='lfcg1.png')&#13;
top_image = Label(app, image=top, bg='#f0f1f5')&#13;
top_image.place(x=30, y=30)&#13;
&#13;
title = customtkinter.CTkLabel(app, font=font1, text='精神病院员工管理系统', &#13;
                               text_color='#fff',bg_color='#161c25')&#13;
title.place(x=60, y=30)&#13;
&#13;
id_label1 = customtkinter.CTkLabel(app, font=font1, text='编  号:', &#13;
                                   text_color='#fff',bg_color='#161c25')&#13;
id_label1.place(x=20, y=80)&#13;
&#13;
id_entry1 = customtkinter.CTkEntry(app, font=font1, text_color='#000',&#13;
                                   fg_color='#fff',border_color='#0c9295',&#13;
                                   border_width=2,width=180)&#13;
id_entry1.place(x=100, y=80)&#13;
&#13;
name_label = customtkinter.CTkLabel(app, font=font1, text='姓  名:', &#13;
                                    text_color='#fff',bg_color='#161c25')&#13;
name_label.place(x=20, y=120)&#13;
&#13;
name_entry = customtkinter.CTkEntry(app, font=font1, text_color='#000',&#13;
                                   fg_color='#fff',border_color='#0c9295',&#13;
                                   border_width=2,width=180)&#13;
name_entry.place(x=100, y=120)&#13;
&#13;
role_label = customtkinter.CTkLabel(app, font=font1, text='角  色:', &#13;
                                    text_color='#fff',bg_color='#161c25')&#13;
role_label.place(x=20, y=160)&#13;
&#13;
role_entry = customtkinter.CTkEntry(app, font=font1, text_color='#000',&#13;
                                   fg_color='#fff',border_color='#0c9295',&#13;
                                   border_width=2,width=180)&#13;
role_entry.place(x=100, y=160)&#13;
&#13;
gender_label = customtkinter.CTkLabel(app, font=font1, text='性  别:', &#13;
                                      text_color='#fff',bg_color='#161c25')&#13;
gender_label.place(x=20, y=200)&#13;
&#13;
options = ['男', '女', '跨性别']&#13;
variable1=StringVar()&#13;
&#13;
gender_options = customtkinter.CTkComboBox(app,font=font1,&#13;
                                           text_color='#000',fg_color='#fff',&#13;
                                           dropdown_hover_color='#0c9295',button_color='#0c9295',&#13;
                                           button_hover_color='#0c9295',border_color='#0c9295',&#13;
                                           width=180,variable=variable1,values=options,state='readonly')&#13;
gender_options.set('男')&#13;
gender_options.place(x=100, y=200)&#13;
&#13;
status_label = customtkinter.CTkLabel(app, font=font1, text='当前状态:', &#13;
                                       text_color='#fff',bg_color='#161c25')&#13;
status_label.place(x=20, y=240)&#13;
&#13;
status_entry = customtkinter.CTkEntry(app, font=font1, text_color='#000',&#13;
                                      fg_color='#fff',border_color='#0c9295',&#13;
                                      border_width=2,width=180)&#13;
status_entry.place(x=100, y=240)&#13;
#############################BUTTON按钮###################################&#13;
add_button = customtkinter.CTkButton(app,command=insert, text='添加员工', font=font1, &#13;
                                     text_color='#fff',fg_color='#05a312',&#13;
                                     hover_color='#00850b',bg_color='#161c25',&#13;
                                     cursor='hand2',corner_radius=15,width=260&#13;
                                     )&#13;
add_button.place(x=20, y=310)&#13;
&#13;
clear_button = customtkinter.CTkButton(app, command=lambda:clear(True), text='清空输入框', font=font1, &#13;
                                       text_color='#fff',fg_color='#05a312',&#13;
                                       hover_color='#00850b',bg_color='#161c25',&#13;
                                       cursor='hand2',corner_radius=15,width=260&#13;
                                       )&#13;
clear_button.place(x=20, y=360)&#13;
&#13;
update_button = customtkinter.CTkButton(app, command=update, text='更新信息', font=font1, &#13;
                                         text_color='#fff',fg_color='#05a312',&#13;
                                          hover_color='#00850b',bg_color='#161c25',&#13;
                                           cursor='hand2',corner_radius=15,width=260)&#13;
update_button.place(x=300, y=360)&#13;
&#13;
delete_button = customtkinter.CTkButton(app,command=delete, text='删除员工', font=font1, &#13;
                                         text_color='#fff',fg_color='red',&#13;
                                          hover_color='#00850b',bg_color='#161c25',&#13;
                                           cursor='hand2',corner_radius=15,width=260)&#13;
delete_button.place(x=580, y=360)&#13;
#####################################&#13;
style = ttk.Style(app)&#13;
style.theme_use('clam')&#13;
style.configure('Treeview', font=font2, rowheight=30, &#13;
                fieldbackground='#161c25', background='#fff', foreground='#000')&#13;
style.map('Treeview', background=[('selected', '#1a8f2d')])&#13;
tree = ttk.Treeview(app, height=15)&#13;
tree['columns'] = ('ID', 'Name', 'Role', 'Gender', 'Status')&#13;
tree.column('#0', width=0, stretch=tk.NO) # 这个是设置第一列的宽度&#13;
tree.column('ID', anchor=tk.CENTER, width=80)# 这个是设置第二列的宽度&#13;
tree.column('Name', anchor=tk.CENTER, width=170)&#13;
tree.column('Role', anchor=tk.CENTER, width=170)&#13;
tree.column('Gender', anchor=tk.CENTER, width=170)&#13;
tree.column('Status', anchor=tk.CENTER, width=170)&#13;
&#13;
tree.heading('#0', text='ID')  #这个是设置表头的名字&#13;
tree.heading('ID', text='ID')&#13;
tree.heading('Name', text='Name')&#13;
tree.heading('Role', text='Role')&#13;
tree.heading('Gender', text='Gender')&#13;
tree.heading('Status', text='Status')&#13;
&#13;
tree.place(x=500, y=20)&#13;
tree.bind('&lt;ButtonRelease&gt;',display_data)&#13;
add_to_treeview()&#13;
&#13;
app.mainloop()&#13;
&#13;
```。</description><guid isPermaLink="true">https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90Python%E3%80%91%28Python-zhong-ji-%29%20-shu-ju-ku-guan-li-xi-tong-_-chu-ji.html</guid><pubDate>Mon, 24 Jun 2024 13:29:48 +0000</pubDate></item><item><title>【Python】(中级项目)数独游戏-Pygame</title><link>https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90Python%E3%80%91%28-zhong-ji-xiang-mu-%29-shu-du-you-xi--Pygame.html</link><description># 项目名称&#13;
&#13;
数独游戏&#13;
&#13;
# 项目简介&#13;
-------------------------------------------------------------&#13;
程序实现了一个基于Pygame库的界面，玩家可以通过键盘输入数字来填充数独格子，并通过回车键来观察解法的可视化过程。</description><guid isPermaLink="true">https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90Python%E3%80%91%28-zhong-ji-xiang-mu-%29-shu-du-you-xi--Pygame.html</guid><pubDate>Sun, 23 Jun 2024 13:17:42 +0000</pubDate></item><item><title>【C++】"栈"是一个好玩的东西(系列之一)</title><link>https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90C%2B%2B%E3%80%91--zhan---shi-yi-ge-hao-wan-de-dong-xi-%28-xi-lie-zhi-yi-%29.html</link><description># 栈是什么&#13;
&#13;
“栈”（读音“zhan”）是计算机科学里最重要且最基础的数据结构之一，英文名：stack；它与堆(HEAP), 队列(QUEUE) 都是学习计算机的人都必须知道的数据结构！如果你问一个人，他居然不知道“栈”是什么？那么你大概可以判断：他没有学过计算机，或者即使学过，也只是学习了皮毛而已。</description><guid isPermaLink="true">https://mcoblackmore.github.io/liuchanghui.github.io/post/%E3%80%90C%2B%2B%E3%80%91--zhan---shi-yi-ge-hao-wan-de-dong-xi-%28-xi-lie-zhi-yi-%29.html</guid><pubDate>Fri, 21 Jun 2024 13:57:17 +0000</pubDate></item><item><title>[C++]第一课要点回顾：模板及变量</title><link>https://mcoblackmore.github.io/liuchanghui.github.io/post/%5BC%2B%2B%5D-di-yi-ke-yao-dian-hui-gu-%EF%BC%9A-mo-ban-ji-bian-liang.html</link><description># 1. 什么是编程？ &#13;
&#13;
编程就是“编写程序”；是人编写计算机能识别的“指令”来让计算机完成一定的任务。</description><guid isPermaLink="true">https://mcoblackmore.github.io/liuchanghui.github.io/post/%5BC%2B%2B%5D-di-yi-ke-yao-dian-hui-gu-%EF%BC%9A-mo-ban-ji-bian-liang.html</guid><pubDate>Thu, 20 Jun 2024 13:16:56 +0000</pubDate></item><item><title>20240620_测试_第一次建立</title><link>https://mcoblackmore.github.io/liuchanghui.github.io/post/20240620_-ce-shi-_-di-yi-ci-jian-li.html</link><description>2024年6月20日：&#13;
我的第一次建立&#13;
但愿年年有今日岁岁有今朝。</description><guid isPermaLink="true">https://mcoblackmore.github.io/liuchanghui.github.io/post/20240620_-ce-shi-_-di-yi-ci-jian-li.html</guid><pubDate>Thu, 20 Jun 2024 12:26:42 +0000</pubDate></item></channel></rss>